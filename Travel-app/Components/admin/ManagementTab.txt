import React, { useState, useEffect, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Plus, Edit, Trash2 } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";

function DynamicForm({ schema, formData, setFormData, onSubmit, onCancel }) {
  if (!schema) return <p>No schema provided for this form.</p>;

  const handleChange = (key, value) => {
    setFormData(prev => ({ ...prev, [key]: value }));
  };

  const renderField = (key, field) => {
    switch (field.type) {
      case 'string':
        if (field.enum) {
          return (
            <select value={formData[key] || ''} onChange={e => handleChange(key, e.target.value)} className="w-full p-2 border rounded">
              {field.enum.map(opt => <option key={opt} value={opt}>{opt}</option>)}
            </select>
          );
        }
        return <input type="text" value={formData[key] || ''} onChange={e => handleChange(key, e.target.value)} className="w-full p-2 border rounded" />;
      case 'number':
        return <input type="number" value={formData[key] || 0} onChange={e => handleChange(key, parseFloat(e.target.value))} className="w-full p-2 border rounded" />;
      case 'array':
        return <textarea value={(formData[key] || []).join(', ')} onChange={e => handleChange(key, e.target.value.split(',').map(s => s.trim()))} className="w-full p-2 border rounded" />;
      default:
        return <input type="text" value={formData[key] || ''} onChange={e => handleChange(key, e.target.value)} className="w-full p-2 border rounded" />;
    }
  };

  return (
    <form onSubmit={onSubmit} className="space-y-4">
      {Object.entries(schema.properties).map(([key, field]) => (
        <div key={key}>
          <label className="font-medium block mb-1 capitalize">{key.replace(/_/g, ' ')}</label>
          {renderField(key, field)}
        </div>
      ))}
      <div className="flex justify-end gap-2 pt-4">
        <Button type="button" variant="outline" onClick={onCancel}>Cancel</Button>
        <Button type="submit">Save</Button>
      </div>
    </form>
  );
}

export default function ManagementTab({ entity, entityName, columns }) {
  const [data, setData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [formData, setFormData] = useState({});

  const loadData = useCallback(async () => {
    setIsLoading(true);
    const items = await entity.list("-created_date");
    setData(items);
    setIsLoading(false);
  }, [entity]);

  useEffect(() => {
    loadData();
  }, [loadData]);

  const handleOpenForm = (item = null) => {
    setEditingItem(item);
    setFormData(item ? { ...item } : {});
    setIsFormOpen(true);
  };

  const handleCloseForm = () => {
    setIsFormOpen(false);
    setEditingItem(null);
    setFormData({});
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (editingItem) {
      await entity.update(editingItem.id, formData);
    } else {
      await entity.create(formData);
    }
    loadData();
    handleCloseForm();
  };

  const handleDelete = async (id) => {
    if (window.confirm("Are you sure you want to delete this item?")) {
      await entity.delete(id);
      loadData();
    }
  };

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>Manage {entityName}</CardTitle>
        <Button onClick={() => handleOpenForm()} className="gap-2">
          <Plus className="w-4 h-4" /> Add New {entityName.slice(0, -1)}
        </Button>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              {columns.map(col => <TableHead key={col.accessor}>{col.header}</TableHead>)}
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {isLoading ? (
              Array(5).fill(0).map((_, i) => (
                <TableRow key={i}>
                  {columns.map(col => <TableCell key={col.accessor}><Skeleton className="h-5" /></TableCell>)}
                  <TableCell><Skeleton className="h-5 w-16" /></TableCell>
                </TableRow>
              ))
            ) : (
              data.map(item => (
                <TableRow key={item.id}>
                  {columns.map(col => <TableCell key={col.accessor}>{item[col.accessor]}</TableCell>)}
                  <TableCell className="space-x-2">
                    <Button variant="ghost" size="icon" onClick={() => handleOpenForm(item)}><Edit className="w-4 h-4" /></Button>
                    <Button variant="ghost" size="icon" onClick={() => handleDelete(item.id)}><Trash2 className="w-4 h-4 text-red-500" /></Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>

        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>{editingItem ? 'Edit' : 'Add'} {entityName.slice(0, -1)}</DialogTitle>
            </DialogHeader>
            <DynamicForm 
              schema={entity.schema()}
              formData={formData}
              setFormData={setFormData}
              onSubmit={handleSubmit}
              onCancel={handleCloseForm}
            />
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  );
}